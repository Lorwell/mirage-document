import{_ as p,W as u,X as r,Y as l,Z as a,a1 as i,$ as n,a0 as s,C as d}from"./framework-c7bcd797.js";const k={},m=i(`<h2 id="介绍" tabindex="-1"><a class="header-anchor" href="#介绍" aria-hidden="true">#</a> 介绍</h2><p>Mirage 的 restful 框架，其中包含了功能</p><ul><li><a href="#%E8%AF%B7%E6%B1%82%E8%BF%87%E6%BB%A4%E5%99%A8">请求过滤器</a></li><li><a href="#%E8%AF%B7%E6%B1%82%E6%8B%A6%E6%88%AA%E5%99%A8">请求拦截器</a></li><li><a href="#%E6%B3%A8%E8%A7%A3%E5%BC%8F%E6%8E%A7%E5%88%B6%E5%99%A8">注解式控制器</a></li><li><a href="#jsr303%E5%8F%82%E6%95%B0%E6%A0%A1%E9%AA%8C">JSR303参数校验</a></li><li><a href="#%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E5%99%A8">异常处理器</a></li><li><a href="#%E8%B7%A8%E5%9F%9F%E8%AF%B7%E6%B1%82%E9%85%8D%E7%BD%AE">跨域请求配置</a></li><li><a href="#%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E6%98%A0%E5%B0%84">静态资源映射</a></li><li><a href="#restful%E9%85%8D%E7%BD%AE">Restful 配置</a></li></ul><h2 id="安装" tabindex="-1"><a class="header-anchor" href="#安装" aria-hidden="true">#</a> 安装</h2><p>在你的pom中引入以下依赖</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>cc.shacocloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mirage-restful<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="请求过滤器" tabindex="-1"><a class="header-anchor" href="#请求过滤器" aria-hidden="true">#</a> 请求过滤器</h2><p>// TODO</p><h2 id="请求拦截器" tabindex="-1"><a class="header-anchor" href="#请求拦截器" aria-hidden="true">#</a> 请求拦截器</h2><p>请求拦截器，在请求到达控制器之前处理，可以通过实现<code>HandlerInterceptor</code> 的方式来定义一个请求拦截器。</p><p><code>HandlerInterceptor</code>提供了两个方法，分别是：</p><ul><li>preHandle 在请求到达控制器前处理，使用此方法，每个拦截器都可以决定是否中止执行链，一般来说中止通常是发送HTTP错误或编写自定义响应。</li><li>afterCompletion 在响应数据写入后调用，一般来说用于请求结束后的资源清理或者日志等操作</li></ul><p>另外也提供了<code>kotlin</code>的协程接口 <code>CoroutineHandlerInterceptor</code>以方便拓展使用</p><p>一般来说我们建议使用<code>@WebInterceptor</code>注解的方式去定义拦截器，另外我们也提供了<code>MirageRestfulConfigurer</code>配置器的方式进行注册。</p><p>注解式</p>`,15),v=n("div",{class:"language-kotlin line-numbers-mode","data-ext":"kt"},[n("pre",{class:"language-kotlin"},[n("code",null,[n("span",{class:"token annotation builtin"},"@WebInterceptor"),s(`
`),n("span",{class:"token keyword"},"open"),s(),n("span",{class:"token keyword"},"class"),s(" RequestInterceptor "),n("span",{class:"token operator"},":"),s(" CoroutineHandlerInterceptor "),n("span",{class:"token punctuation"},"{"),s(`
    
    `),n("span",{class:"token keyword"},"override"),s(),n("span",{class:"token keyword"},"suspend"),s(),n("span",{class:"token keyword"},"fun"),s(),n("span",{class:"token function"},"doPreHandle"),n("span",{class:"token punctuation"},"("),s("request"),n("span",{class:"token operator"},":"),s(" HttpRequest"),n("span",{class:"token punctuation"},","),s(" response"),n("span",{class:"token operator"},":"),s(" HttpResponse"),n("span",{class:"token punctuation"},","),s(" handler"),n("span",{class:"token operator"},":"),s(" VertxInvokeHandler"),n("span",{class:"token punctuation"},")"),n("span",{class:"token operator"},":"),s(" Boolean "),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token comment"},"// TODO..."),s(`
        `),n("span",{class:"token keyword"},"return"),s(` ture
    `),n("span",{class:"token punctuation"},"}"),s(`

    `),n("span",{class:"token keyword"},"override"),s(),n("span",{class:"token keyword"},"suspend"),s(),n("span",{class:"token keyword"},"fun"),s(),n("span",{class:"token function"},"doAfterCompletion"),n("span",{class:"token punctuation"},"("),s("request"),n("span",{class:"token operator"},":"),s(" HttpRequest"),n("span",{class:"token punctuation"},","),s(" response"),n("span",{class:"token operator"},":"),s(" HttpResponse"),n("span",{class:"token punctuation"},","),s(" handler"),n("span",{class:"token operator"},":"),s(" VertxInvokeHandler"),n("span",{class:"token punctuation"},","),s(" cause"),n("span",{class:"token operator"},":"),s(" Throwable"),n("span",{class:"token operator"},"?"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
       `),n("span",{class:"token comment"},"// TODO..."),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
    
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),b=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{class:"language-java"},[n("code",null,[n("span",{class:"token annotation punctuation"},"@WebInterceptor"),s(`
`),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"RequestInterceptor"),s(),n("span",{class:"token keyword"},"implements"),s(),n("span",{class:"token class-name"},"HandlerInterceptor"),s(),n("span",{class:"token punctuation"},"{"),s(`
    
    `),n("span",{class:"token annotation punctuation"},"@Override"),s(`
    `),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token class-name"},"Future"),n("span",{class:"token generics"},[n("span",{class:"token punctuation"},"<"),n("span",{class:"token class-name"},"Boolean"),n("span",{class:"token punctuation"},">")]),s(),n("span",{class:"token function"},"preHandle"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"HttpRequest"),s(" request"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token class-name"},"HttpResponse"),s(" response"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token class-name"},"VertxInvokeHandler"),s(" handler"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token comment"},"// TODO..."),s(`
        `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token class-name"},"Future"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"succeededFuture"),n("span",{class:"token punctuation"},"("),n("span",{class:"token boolean"},"true"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
    
    `),n("span",{class:"token annotation punctuation"},"@Override"),s(`
    `),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token class-name"},"Future"),n("span",{class:"token generics"},[n("span",{class:"token punctuation"},"<"),n("span",{class:"token class-name"},"Void"),n("span",{class:"token punctuation"},">")]),s(),n("span",{class:"token function"},"afterCompletion"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"HttpRequest"),s(" request"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token class-name"},"HttpResponse"),s(" response"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token class-name"},"VertxInvokeHandler"),s(" handler"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token annotation punctuation"},"@Nullable"),s(),n("span",{class:"token class-name"},"Throwable"),s(" cause"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token comment"},"// TODO..."),s(`
        `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token class-name"},"Future"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"succeededFuture"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),h=n("p",null,"声明式",-1),g=n("div",{class:"language-kotlin line-numbers-mode","data-ext":"kt"},[n("pre",{class:"language-kotlin"},[n("code",null,[n("span",{class:"token annotation builtin"},"@Configuration"),s(`
`),n("span",{class:"token keyword"},"open"),s(),n("span",{class:"token keyword"},"class"),s(" WebMvcConfigurer "),n("span",{class:"token operator"},":"),s(" MirageRestfulConfigurer "),n("span",{class:"token punctuation"},"{"),s(`
   
    `),n("span",{class:"token annotation builtin"},"@Override"),s(`
    `),n("span",{class:"token keyword"},"fun"),s(),n("span",{class:"token function"},"registerHandlerInterceptor"),n("span",{class:"token punctuation"},"("),s("interceptorMappings "),n("span",{class:"token operator"},":"),s(" List"),n("span",{class:"token operator"},"<"),s("InterceptorMappingInfo"),n("span",{class:"token operator"},">"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
          `),n("span",{class:"token comment"},"// TODO..."),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
    
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),f=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{class:"language-java"},[n("code",null,[n("span",{class:"token annotation punctuation"},"@Configuration"),s(`
`),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"WebMvcConfigurer"),s(),n("span",{class:"token keyword"},"implements"),s(),n("span",{class:"token class-name"},"MirageRestfulConfigurer"),s(),n("span",{class:"token punctuation"},"{"),s(`
   
    `),n("span",{class:"token annotation punctuation"},"@Override"),s(`
    `),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"void"),s(),n("span",{class:"token function"},"registerHandlerInterceptor"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"List"),n("span",{class:"token generics"},[n("span",{class:"token punctuation"},"<"),n("span",{class:"token class-name"},"InterceptorMappingInfo"),n("span",{class:"token punctuation"},">")]),s(" interceptorMappings"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
          `),n("span",{class:"token comment"},"// TODO..."),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
    
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),y=i('<h3 id="拦截规则" tabindex="-1"><a class="header-anchor" href="#拦截规则" aria-hidden="true">#</a> 拦截规则</h3><p>你可以使用<code>@WebInterceptor</code>注释来映射请求拦截，它拥有以下属性：</p><ul><li>includePatterns 拦截路径模式，表示那些请求路径会被拦截</li><li>excludePatterns 排除路径模式，表示那些请求会被排除，该值应用与<code>includePatterns</code>匹配成功的路径</li></ul><p>使用 <code>AntPathMatcher</code>来实现，使用以下规则匹配路径：</p><ul><li><code>?</code> 匹配一个字符</li><li><code>*</code> 匹配零个或多个字符</li><li><code>**</code> 匹配路径中的零个或多个层级</li></ul><p>一些示例：</p><ul><li><code>@WebInterceptor(includePatterns=&quot;/api/*&quot;)</code> 匹配所有以<code>/api</code>开头，但只有2层级的路径</li><li><code>@WebInterceptor(includePatterns=&quot;/api/**&quot;)</code> 匹配所有以<code>/api</code>开头，不限制层级的路径</li><li><code>@WebInterceptor(includePatterns=&quot;/api/t?st&quot;)</code> 匹配<code>/api/test</code>也匹配<code>/api/tast</code></li><li><code>@WebInterceptor(includePatterns=&quot;/api/*&quot;,excludePatterns=&quot;/api/test&quot;)</code> 匹配所有以<code>/api</code>开头，但只有2层级的路径，排除<code>/api/test</code></li></ul><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>当请求映射模式为<code>PATH</code>时，拦截器的匹配是在启动时，匹配控制器的映射路径并且将拦截器信息挂载在控制器处理调用链上，见<code>HandlerExecutionChain</code>。</p><p>存在以下假设逻辑：</p><p>一个拦截器规则为：<code>@WebInterceptor(includePatterns=&quot;/api/t?st&quot;)</code> ，</p><p>一个控制器映射为：<code>@RequestMapping(”/api/:value“)</code></p><p>那么当一个请求信息<code>/api/test</code>映射到该控制器时，并不会被拦截器所拦截。</p><p>相对的，当请求映射模式为<code>REGEX</code>时，拦截器匹配是在收到请求时根据请求信息实时匹配的，这样的好处是拦截器映射更加准确，但是对应高性能来说是一场灾难。</p></div><h2 id="注解式控制器" tabindex="-1"><a class="header-anchor" href="#注解式控制器" aria-hidden="true">#</a> 注解式控制器</h2><p>Mirage Restful 提供了一个基于注解的编程模型，使用<code>@Controller</code>或<code>@RestController</code>注解来表达请求映射、请求输入等组件。带注释的控制器具有灵活的方法签名，不必扩展基类，也不必实现特定的接口。以下示例显示了由注释定义的控制器：</p>',10),x=n("div",{class:"language-kotlin line-numbers-mode","data-ext":"kt"},[n("pre",{class:"language-kotlin"},[n("code",null,[n("span",{class:"token annotation builtin"},"@RestController"),s(`
`),n("span",{class:"token keyword"},"class"),s(" HelloWordController "),n("span",{class:"token punctuation"},"{"),s(`
    
   `),n("span",{class:"token annotation builtin"},"@GetMapping"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string-literal singleline"},[n("span",{class:"token string"},'"/hello-word"')]),n("span",{class:"token punctuation"},")"),s(`
   `),n("span",{class:"token keyword"},"suspend"),s(),n("span",{class:"token keyword"},"fun"),s(),n("span",{class:"token function"},"handle"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token operator"},":"),s(" Any "),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token keyword"},"val"),s(" result"),n("span",{class:"token operator"},":"),s(" Map"),n("span",{class:"token operator"},"<"),s("String"),n("span",{class:"token punctuation"},","),s(" String"),n("span",{class:"token operator"},">"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token function"},"mutableMapOf"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(`
        result`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"put"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string-literal singleline"},[n("span",{class:"token string"},'"code"')]),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string-literal singleline"},[n("span",{class:"token string"},'"ok"')]),n("span",{class:"token punctuation"},")"),s(`
        result`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"put"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string-literal singleline"},[n("span",{class:"token string"},'"message"')]),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string-literal singleline"},[n("span",{class:"token string"},'"hello-word"')]),n("span",{class:"token punctuation"},")"),s(`
        `),n("span",{class:"token keyword"},"return"),s(` result
    `),n("span",{class:"token punctuation"},"}"),s(`
    
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),E=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{class:"language-java"},[n("code",null,[n("span",{class:"token annotation punctuation"},"@RestController"),s(`
`),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"HelloWordController"),s(),n("span",{class:"token punctuation"},"{"),s(`

    `),n("span",{class:"token annotation punctuation"},"@GetMapping"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"/hello-word"'),n("span",{class:"token punctuation"},")"),s(`
    `),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token class-name"},"Future"),n("span",{class:"token generics"},[n("span",{class:"token punctuation"},"<"),n("span",{class:"token class-name"},"Object"),n("span",{class:"token punctuation"},">")]),s(),n("span",{class:"token function"},"handle"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token class-name"},"Map"),n("span",{class:"token generics"},[n("span",{class:"token punctuation"},"<"),n("span",{class:"token class-name"},"String"),n("span",{class:"token punctuation"},","),n("span",{class:"token class-name"},"String"),n("span",{class:"token punctuation"},">")]),s(" result "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"HashMap"),n("span",{class:"token generics"},[n("span",{class:"token punctuation"},"<"),n("span",{class:"token punctuation"},">")]),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        result`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"put"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"code"'),n("span",{class:"token punctuation"},","),n("span",{class:"token string"},'"ok"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        result`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"put"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"message"'),n("span",{class:"token punctuation"},","),n("span",{class:"token string"},'"hello-word"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token class-name"},"Future"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"successFuture"),n("span",{class:"token punctuation"},"("),s("result"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
    
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),R=i('<div class="hint-container info"><p class="hint-container-title">RestController</p><p><code>@RestController</code>是一个组合注释，它本身是元注释的，它本身用<code>@Controller</code>和<code>@ResponseBody</code>进行元注释，以指示控制器的每个方法都继承了类型级别的<code>@ResponseBody</code>注释，因此，它直接写入响应主体。</p></div><h3 id="请求映射" tabindex="-1"><a class="header-anchor" href="#请求映射" aria-hidden="true">#</a> 请求映射</h3><p>你可以使用<code>@RequestMapping</code>注释将请求映射到控制器方法，它具有以下属性，可以通过URL、HTTP方法、请求参数、报头和媒体类型进行匹配。你可以在类级别使用它来表示共享映射，或者在方法级别使用它来缩小到特定地址的映射</p><p>还有一些特定于HTTP方法的<code>@RequestMapping</code>的快捷方式的变体:</p><ul><li>@GetMapping</li><li>@PostMapping</li><li>@PutMapping</li><li>@DeleteMapping</li><li>@PatchMapping</li></ul><p>提供的快捷方式是自定义注释，这是因为大多数控制器方法应该映射到特定的HTTP方法，而不是使用<code>@RequestMapping</code>，<code>@RequestMapping</code>在默认情况下匹配所有HTTP方法，所以在类级别仍然需要<code>@RequestMapping</code>来表示共享映射。</p><p>下面的例子有类型级和方法级的映射:</p>',7),_=n("div",{class:"language-kotlin line-numbers-mode","data-ext":"kt"},[n("pre",{class:"language-kotlin"},[n("code",null,[n("span",{class:"token annotation builtin"},"@RestController"),s(`
`),n("span",{class:"token annotation builtin"},"@RequestMapping"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string-literal singleline"},[n("span",{class:"token string"},'"/api/user"')]),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token keyword"},"class"),s(" UserController "),n("span",{class:"token punctuation"},"{"),s(`

    `),n("span",{class:"token annotation builtin"},"@GetMapping"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string-literal singleline"},[n("span",{class:"token string"},'"/:id"')]),n("span",{class:"token punctuation"},")"),s(`
    `),n("span",{class:"token keyword"},"suspend"),s(),n("span",{class:"token keyword"},"fun"),s(),n("span",{class:"token function"},"getUser"),n("span",{class:"token punctuation"},"("),n("span",{class:"token annotation builtin"},"@PathVariable"),s(" id"),n("span",{class:"token operator"},":"),s(" Long"),n("span",{class:"token punctuation"},")"),n("span",{class:"token operator"},":"),s(" User "),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token comment"},"// ..."),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`

    `),n("span",{class:"token annotation builtin"},"@PostMapping"),s(`
    `),n("span",{class:"token keyword"},"suspend"),s(),n("span",{class:"token keyword"},"fun"),s(),n("span",{class:"token function"},"add"),n("span",{class:"token punctuation"},"("),n("span",{class:"token annotation builtin"},"@RequestBody"),s(" user"),n("span",{class:"token operator"},":"),s(" User"),n("span",{class:"token punctuation"},")"),n("span",{class:"token operator"},":"),s(" User "),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token comment"},"// ..."),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),w=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{class:"language-java"},[n("code",null,[n("span",{class:"token annotation punctuation"},"@RestController"),s(`
`),n("span",{class:"token annotation punctuation"},"@RequestMapping"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"/api/user"'),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"UserController"),s(),n("span",{class:"token punctuation"},"{"),s(`

    `),n("span",{class:"token annotation punctuation"},"@GetMapping"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"/:id"'),n("span",{class:"token punctuation"},")"),s(`
    `),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token class-name"},"Future"),n("span",{class:"token generics"},[n("span",{class:"token punctuation"},"<"),n("span",{class:"token class-name"},"User"),n("span",{class:"token punctuation"},">")]),s(),n("span",{class:"token function"},"getUser"),n("span",{class:"token punctuation"},"("),n("span",{class:"token annotation punctuation"},"@PathVariable"),s(),n("span",{class:"token class-name"},"Long"),s(" id"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token comment"},"// ..."),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`

    `),n("span",{class:"token annotation punctuation"},"@PostMapping"),s(`
    `),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token class-name"},"Future"),n("span",{class:"token generics"},[n("span",{class:"token punctuation"},"<"),n("span",{class:"token class-name"},"User"),n("span",{class:"token punctuation"},">")]),s(),n("span",{class:"token function"},"add"),n("span",{class:"token punctuation"},"("),n("span",{class:"token annotation punctuation"},"@RequestBody"),s(),n("span",{class:"token class-name"},"User"),s(" user"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token comment"},"// ..."),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),H=i('<h4 id="uri-模式" tabindex="-1"><a class="header-anchor" href="#uri-模式" aria-hidden="true">#</a> URI 模式</h4><p><code>@RequestMapping</code>可以使用 URL 模式映射方法，有三种选择：</p><ul><li>基于精确路径的路由 将映射模式设置为<code>PATH</code>，在这种情况下它只会匹配路径一致的请求，例如：<code>/api/user</code></li><li>基于路径前缀的路由 将映射模式设置为<code>PATH</code>，方式是在声明路径时使用一个 <code>*</code> 作为结尾，例如：<code>/api/user/*</code></li><li>基于正则表达式的路由 将映射模式设置为<code>REGEX</code>，即可使用正则表达式匹配路由的 URI 路径</li></ul><p>一些示例：</p><ul><li><code>/api/user</code>- 匹配精确路径</li><li><code>/api/user/*</code>- 匹配指定前缀的路径</li><li><code>&quot;/api/user/:id&quot;</code>- 匹配精确路径并将其捕获为变量</li><li><code>&quot;\\\\/([^\\\\/]+)\\\\/([^\\\\/]+)&quot;</code>- 正则匹配路径并将其捕获为变量 例如：请求路径<code>/api/user</code> 路径匹配，<code>api</code> 可以通过参数 param0 获取，<code>user</code> 可以通过参数 param1 获取</li><li><code>\\\\/(?&lt;p0&gt;[^\\\\/]+)\\\\/(?&lt;p1&gt;[^\\\\/]+)</code>- 正则匹配路径并使用命名捕捉组的方式将其捕获为变量 例如：请求路径<code>/api/user</code> 路径匹配，<code>api</code> 可以通过参数 p0 获取，<code>user</code> 可以通过参数 p1 获取</li></ul><p>捕获的 URI 变量可以使用<code>@PathVariable</code></p><h4 id="媒体类型-contenttype" tabindex="-1"><a class="header-anchor" href="#媒体类型-contenttype" aria-hidden="true">#</a> 媒体类型 ContentType</h4><p>你可以根据请求的<code>Content-Type</code>来缩小请求映射，示例如下:</p>',8),C=n("div",{class:"language-kotlin line-numbers-mode","data-ext":"kt"},[n("pre",{class:"language-kotlin"},[n("code",null,[n("span",{class:"token annotation builtin"},"@PostMapping"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string-literal singleline"},[n("span",{class:"token string"},'"/api/user"')]),n("span",{class:"token punctuation"},","),s(" consumes "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"["),n("span",{class:"token string-literal singleline"},[n("span",{class:"token string"},'"application/json"')]),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")"),s(` 
`),n("span",{class:"token keyword"},"suspend"),s(),n("span",{class:"token keyword"},"fun"),s(),n("span",{class:"token function"},"addPet"),n("span",{class:"token punctuation"},"("),n("span",{class:"token annotation builtin"},"@RequestBody"),s(" user"),n("span",{class:"token operator"},":"),s(" User"),n("span",{class:"token punctuation"},")"),n("span",{class:"token operator"},":"),s(" User "),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token comment"},"// ..."),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),A=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{class:"language-java"},[n("code",null,[n("span",{class:"token annotation punctuation"},"@PostMapping"),n("span",{class:"token punctuation"},"("),s("path "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string"},'"/api/user"'),n("span",{class:"token punctuation"},","),s(" consumes "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string"},'"application/json"'),n("span",{class:"token punctuation"},")"),s(` 
`),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token class-name"},"Future"),n("span",{class:"token generics"},[n("span",{class:"token punctuation"},"<"),n("span",{class:"token class-name"},"User"),n("span",{class:"token punctuation"},">")]),s(),n("span",{class:"token function"},"addPet"),n("span",{class:"token punctuation"},"("),n("span",{class:"token annotation punctuation"},"@RequestBody"),s(),n("span",{class:"token class-name"},"User"),s(" user"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token comment"},"// ..."),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),M=n("p",null,[s("可以在类级别声明共享的"),n("code",null,"consumes"),s("属性，当在方法级别重写时会覆盖类级别声明")],-1),O=n("h4",{id:"媒体类型-accept",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#媒体类型-accept","aria-hidden":"true"},"#"),s(" 媒体类型 Accept")],-1),j=n("p",null,[s("你可以根据请求的"),n("code",null,"Accept"),s("来缩小请求映射，如下所示:")],-1),q=n("div",{class:"language-kotlin line-numbers-mode","data-ext":"kt"},[n("pre",{class:"language-kotlin"},[n("code",null,[n("span",{class:"token annotation builtin"},"@GetMapping"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string-literal singleline"},[n("span",{class:"token string"},'"/api/user/:id"')]),n("span",{class:"token punctuation"},","),s(" produces "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"["),n("span",{class:"token string-literal singleline"},[n("span",{class:"token string"},'"application/json"')]),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")"),s(` 
`),n("span",{class:"token annotation builtin"},"@ResponseBody"),s(`
`),n("span",{class:"token keyword"},"suspend"),s(),n("span",{class:"token keyword"},"fun"),s(),n("span",{class:"token function"},"findUser"),n("span",{class:"token punctuation"},"("),n("span",{class:"token annotation builtin"},"@PathVariable"),s(" id"),n("span",{class:"token operator"},":"),s(" String"),n("span",{class:"token punctuation"},")"),n("span",{class:"token operator"},":"),s(" User "),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token comment"},"// ..."),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),B=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{class:"language-java"},[n("code",null,[n("span",{class:"token annotation punctuation"},"@GetMapping"),n("span",{class:"token punctuation"},"("),s("path "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string"},'"/api/user/:id"'),n("span",{class:"token punctuation"},","),s(" produces "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string"},'"application/json"'),n("span",{class:"token punctuation"},")"),s(` 
`),n("span",{class:"token annotation punctuation"},"@ResponseBody"),s(`
`),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token class-name"},"Future"),n("span",{class:"token generics"},[n("span",{class:"token punctuation"},"<"),n("span",{class:"token class-name"},"User"),n("span",{class:"token punctuation"},">")]),s(),n("span",{class:"token function"},"findUser"),n("span",{class:"token punctuation"},"("),n("span",{class:"token annotation punctuation"},"@PathVariable"),s(),n("span",{class:"token class-name"},"String"),s(" id"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token comment"},"// ..."),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),I=i('<p>可以在类级别声明共享的<code>produces</code>属性，当在方法级别重写时会覆盖类级别声明</p><h3 id="方法参数" tabindex="-1"><a class="header-anchor" href="#方法参数" aria-hidden="true">#</a> 方法参数</h3><p>下表描述了支持的控制器方法参数</p><table><thead><tr><th>方法参数</th><th>描述</th></tr></thead><tbody><tr><td>RoutingContext</td><td>当前的路由上下文对象</td></tr><tr><td>HttpRequest</td><td>当前的请求对象</td></tr><tr><td>HttpResponse</td><td>当前的响应对象</td></tr><tr><td>@FileUpload</td><td>文件上传注解，指方法参数的注解应该绑定到web请求的文件上，与 <code>MultipartFileUpload</code> 组合使用，用于处理文件上传请求</td></tr><tr><td>@FormAttribute</td><td>Form 表单参数注解，指方法参数应绑定到HTTP表单的属性上</td></tr><tr><td>@PathVariable</td><td>路径参数注解，指方法参数应绑定到HTTP路径变量上，例如： 当前方法的路径绑定<code>RequestMapping(&quot;/api/user/:id&quot;)</code>，请求路径为<code>/api/user/1</code>， 那么指定的路径变量<code>id</code>的值为 <code>1</code></td></tr><tr><td>@QueryParam</td><td>查询参数注解，指方法参数应绑定到HTTP查询参数上，例如：<code>/api/user?x1=xx&amp;x2=x2</code> 中的 <code>x1=xx&amp;x2=x2</code></td></tr><tr><td>@RequestBody</td><td>请求主体参数注解，指方法参数的注解应该绑定到web请求的主体，请求的主体通过<code>HttpMessageConverter</code>来解析方法参数，具体取决于请求的内容类型。</td></tr><tr><td>@RequestHeader</td><td>请求头参数注解，指方法参数应绑定到HTTP请求头上</td></tr></tbody></table><h3 id="返回值" tabindex="-1"><a class="header-anchor" href="#返回值" aria-hidden="true">#</a> 返回值</h3><p>下表描述了支持的控制器方法返回值</p><table><thead><tr><th>返回值</th><th>描述</th></tr></thead><tbody><tr><td>Future</td><td>所有注解方法的返回值都应该有<code>Future</code>对象包裹kotlin的协程方法除外，以下返回值表示的都是 <code>Future</code> 所包裹的类型。</td></tr><tr><td>Buffer</td><td>Vertx 内核所使用的缓冲区对象，可以直接作为方法的返回值结果，其结果将不进行任何解析处理，直接写入响应主体。</td></tr><tr><td>@ResponseBody</td><td>响应注解方法注解，指方法返回值应绑定到web响应体上。支持带定义在类级别，方法级别未定义则继承类级别。响应的主体通过<code>HttpMessageConverter</code>来解析方法返回值，具体取决于响应的内容类型，它仅允许渲染对象的结果值。</td></tr></tbody></table><p><strong>Jackson JSON</strong></p><p>mirage 提供对 Jackson JSON库的支持，要将其与 <code>@ResponseBody</code>标识的控制器方法一起使用，它仅允许渲染对象的结果值。</p><h3 id="httpmessageconverter" tabindex="-1"><a class="header-anchor" href="#httpmessageconverter" aria-hidden="true">#</a> HttpMessageConverter</h3><p>针对http请求主体我们定义了<code>HttpMessageConverter</code>的方式来解析内容，默认情况下提供基于<code>jackson</code>的实现<code>JacksonHttpMessageConverter</code>，支持解析<code>application/json</code>,<code>application/*+json</code>请求或响应类型的内容，亦或者你可以通过<code>MirageRestfulConfigurer</code>注册自定义的<code>HttpMessageConverter</code></p><h3 id="控制器增强" tabindex="-1"><a class="header-anchor" href="#控制器增强" aria-hidden="true">#</a> 控制器增强</h3><p><code>@ControllerAdvice</code>用于增强<code>@Controller</code>控制器的功能，你可以使用它来声明异常处理器<code>@ExceptionHandler</code>，以及后续的相关拓展...</p><div class="hint-container info"><p class="hint-container-title">RestControllerAdvice</p><p><code>@RestControllerAdvice</code>是一个组合注释，它本身是元注释的，它本身用<code>@ControllerAdvice</code>和<code>@ResponseBody</code>进行元注释，以指示控制器增强的每个方法都继承了类型级别的<code>@ResponseBody</code>注释，因此，它直接写入响应主体。</p></div><h2 id="jsr303参数校验" tabindex="-1"><a class="header-anchor" href="#jsr303参数校验" aria-hidden="true">#</a> JSR303参数校验</h2><p>// TODO</p><h2 id="异常处理器" tabindex="-1"><a class="header-anchor" href="#异常处理器" aria-hidden="true">#</a> 异常处理器</h2><p>如果在请求路由映射期间发生异常或从请求处理程序（例如 <code>@Controller</code>）抛出异常，则<code>VertxRouterRequestMappingMappingRequestHandler</code>委托到<code>HandlerExceptionResolverComposite</code> 以解决异常并提供错误处理的结果。</p><p>以下说明了可用的<code>HandlerExceptionResolver</code>的实现</p><table><thead><tr><th>实现对象</th><th>描述</th></tr></thead><tbody><tr><td><code>ExceptionHandlerExceptionResolver</code></td><td>通过调用声明<code>@ControllerAdvice</code> 注解类中，标识<code>@ExceptionHandler</code>注解的方法来解决异常。请查阅<a href="#exceptionhandlerexceptionresolver">ExceptionHandlerExceptionResolver</a></td></tr></tbody></table><h3 id="异常解析器责任链" tabindex="-1"><a class="header-anchor" href="#异常解析器责任链" aria-hidden="true">#</a> 异常解析器责任链</h3><p>您可以通过在 <code>MirageWebMvcConfigurer</code>配置中注册多个<code>HandlerExceptionResolver</code>来形成异常解析器链，系统默认包含<code>ExceptionHandlerExceptionResolver</code>。</p><h3 id="exceptionhandlerexceptionresolver" tabindex="-1"><a class="header-anchor" href="#exceptionhandlerexceptionresolver" aria-hidden="true">#</a> ExceptionHandlerExceptionResolver</h3><p><a href="#%E6%8E%A7%E5%88%B6%E5%99%A8%E5%A2%9E%E5%BC%BA">@ControllerAdvice</a> 类可以具有 <code>@ExceptionHandler</code>处理来自控制器方法的异常的方法，如以下示例所示：</p>',24),T=n("div",{class:"language-kotlin line-numbers-mode","data-ext":"kt"},[n("pre",{class:"language-kotlin"},[n("code",null,[n("span",{class:"token annotation builtin"},"@RestControllerAdvice"),s(`
`),n("span",{class:"token keyword"},"class"),s(" SampleExceptionHandler "),n("span",{class:"token punctuation"},"{"),s(`

    `),n("span",{class:"token annotation builtin"},"@ExceptionHandler"),n("span",{class:"token punctuation"},"("),s("IOException"),n("span",{class:"token operator"},"::"),n("span",{class:"token keyword"},"class"),n("span",{class:"token punctuation"},")"),s(`
    `),n("span",{class:"token keyword"},"fun"),s(),n("span",{class:"token function"},"handle"),n("span",{class:"token punctuation"},"("),s("ex"),n("span",{class:"token operator"},":"),s(" IOException"),n("span",{class:"token punctuation"},")"),n("span",{class:"token operator"},":"),s(" Any "),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token comment"},"// TODO ..."),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),P=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{class:"language-java"},[n("code",null,[n("span",{class:"token annotation punctuation"},"@RestControllerAdvice"),s(`
`),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"SampleExceptionHandler"),s(),n("span",{class:"token punctuation"},"{"),s(`

    `),n("span",{class:"token annotation punctuation"},"@ExceptionHandler"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"IOException"),n("span",{class:"token punctuation"},"."),n("span",{class:"token keyword"},"class"),n("span",{class:"token punctuation"},")"),s(`
    `),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token class-name"},"Object"),s(),n("span",{class:"token function"},"handle"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"IOException"),s(" ex"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token comment"},"// TODO ..."),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),F=n("p",null,[s("异常可以与正在传播的顶级异常（例如，直接 "),n("code",null,"IOException"),s("抛出）或与包装器异常中的嵌套原因（例如，"),n("code",null,"IOException"),s("包装在 中"),n("code",null,"IllegalStateException"),s("）匹配。")],-1),U=n("p",null,[s("对于匹配的异常类型，最好将目标异常声明为方法参数，如上面的示例所示。当多个异常方法匹配时，根异常匹配通常优于原因异常匹配。更具体地说，"),n("code",null,"ExceptionDepthComparator"),s(" 它根据抛出的异常类型的深度对异常进行排序。")],-1),S=n("p",null,"或者，注释声明可以缩小要匹配的异常类型，如以下示例所示：",-1),D=n("div",{class:"language-kotlin line-numbers-mode","data-ext":"kt"},[n("pre",{class:"language-kotlin"},[n("code",null,[n("span",{class:"token annotation builtin"},"@ExceptionHandler"),n("span",{class:"token punctuation"},"("),s("FileSystemException"),n("span",{class:"token operator"},"::"),n("span",{class:"token keyword"},"class"),n("span",{class:"token punctuation"},","),s(" RemoteException"),n("span",{class:"token operator"},"::"),n("span",{class:"token keyword"},"class"),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token keyword"},"fun"),s(),n("span",{class:"token function"},"handle"),n("span",{class:"token punctuation"},"("),s("ex"),n("span",{class:"token operator"},":"),s(" IOException"),n("span",{class:"token punctuation"},")"),n("span",{class:"token operator"},":"),s(" Any "),n("span",{class:"token punctuation"},"{"),s(`
   `),n("span",{class:"token comment"},"// TODO ..."),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),V=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{class:"language-java"},[n("code",null,[n("span",{class:"token annotation punctuation"},"@ExceptionHandler"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"{"),n("span",{class:"token class-name"},"FileSystemException"),n("span",{class:"token punctuation"},"."),n("span",{class:"token keyword"},"class"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token class-name"},"RemoteException"),n("span",{class:"token punctuation"},"."),n("span",{class:"token keyword"},"class"),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token class-name"},"Object"),s(),n("span",{class:"token function"},"handle"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"IOException"),s(" ex"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token comment"},"// TODO ..."),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),W=i('<h3 id="方法参数-1" tabindex="-1"><a class="header-anchor" href="#方法参数-1" aria-hidden="true">#</a> 方法参数</h3><p><code>@ExceptionHandler</code>方法支持以下参数：</p><table><thead><tr><th>方法参数</th><th>描述</th></tr></thead><tbody><tr><td>RoutingContext</td><td>当前的路由上下文对象</td></tr><tr><td>HttpRequest</td><td>当前的请求对象</td></tr><tr><td>HttpResponse</td><td>当前的响应对象</td></tr><tr><td>？extends Throwable</td><td>当前抛出的异常类型</td></tr></tbody></table><h3 id="返回值-1" tabindex="-1"><a class="header-anchor" href="#返回值-1" aria-hidden="true">#</a> 返回值</h3><p>参照：<a href="#%E8%BF%94%E5%9B%9E%E5%80%BC">注解式控制器返回值</a></p><h2 id="跨域请求配置" tabindex="-1"><a class="header-anchor" href="#跨域请求配置" aria-hidden="true">#</a> 跨域请求配置</h2><p>// TODO</p><h2 id="静态资源映射" tabindex="-1"><a class="header-anchor" href="#静态资源映射" aria-hidden="true">#</a> 静态资源映射</h2><p>针对静态资源访问，我们在 <code>MirageRestfulConfigurer</code> 中提供了注册处理器的方式完成，以下是一份简单的示例：</p>',9),G=n("div",{class:"language-kotlin line-numbers-mode","data-ext":"kt"},[n("pre",{class:"language-kotlin"},[n("code",null,[n("span",{class:"token annotation builtin"},"@Component"),s(`
`),n("span",{class:"token keyword"},"class"),s(" DemoRestfulConfigurer "),n("span",{class:"token operator"},":"),s(" MirageRestfulConfigurer "),n("span",{class:"token punctuation"},"{"),s(`

    `),n("span",{class:"token keyword"},"override"),s(),n("span",{class:"token keyword"},"fun"),s(),n("span",{class:"token function"},"registerStaticResourceHandler"),n("span",{class:"token punctuation"},"("),s("registry"),n("span",{class:"token operator"},":"),s(" StaticResourceHandlerRegistry"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        registry`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"addRootHandler"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string-literal singleline"},[n("span",{class:"token string"},'"classpath:static"')]),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token operator"},"*"),n("span",{class:"token function"},"arrayOf"),n("span",{class:"token punctuation"},"("),s('"'),n("span",{class:"token comment"},`/*"))
    }
}
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),N=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{class:"language-java"},[n("code",null,[n("span",{class:"token annotation punctuation"},"@Component"),s(`
`),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"DemoRestfulConfigurer"),s(),n("span",{class:"token keyword"},"implements"),s(),n("span",{class:"token class-name"},"MirageRestfulConfigurer"),s(),n("span",{class:"token punctuation"},"{"),s(`

    `),n("span",{class:"token annotation punctuation"},"@Override"),s(`
    `),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"void"),s(),n("span",{class:"token function"},"registerStaticResourceHandler"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"StaticResourceHandlerRegistry"),s(" registry"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        registry`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"addRootHandler"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"classpath:static"'),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},'"/*"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),J=i(`<p>以上的示例表示，将类资源下 <code>static</code>目录映射到 <code>/*</code> 请求下，更多的细节请自行查看。</p><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>静态资源使用前缀路径匹配，示例：/static/* 以 /static/ 开头的路径的请求都将从目录 classpath:webroot 得到响应， 例如，如果请求路径为 static/css/styles.css，则静态服务将在目录 classpath:webroot/css/styles.css 中查找文件，您也可以自定义 webroot 为其他目录。</p></div><h2 id="restful配置" tabindex="-1"><a class="header-anchor" href="#restful配置" aria-hidden="true">#</a> Restful配置</h2><p>可以通过自定义配置来定义 restful 一些启动设置，以下是一个配置示例：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">mirage</span><span class="token punctuation">:</span>
  <span class="token key atrule">restful</span><span class="token punctuation">:</span>
    <span class="token comment"># http server 配置属性</span>
    <span class="token key atrule">httpServerOptions</span><span class="token punctuation">:</span>
      <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8080</span>
      <span class="token key atrule">compressionSupported</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>
      <span class="token key atrule">compressionLevel</span><span class="token punctuation">:</span> <span class="token number">6</span>
      <span class="token key atrule">maxWebSocketFrameSize</span><span class="token punctuation">:</span> <span class="token number">65536</span>
    <span class="token comment"># Verticle 部署的配置属性</span>
    <span class="token key atrule">deploymentOptions</span><span class="token punctuation">:</span> 
      <span class="token key atrule">instances</span><span class="token punctuation">:</span> <span class="token number">10</span>
    <span class="token comment"># 请求体处理器配置属性</span>
    <span class="token key atrule">bodyOptions</span><span class="token punctuation">:</span> 
      <span class="token key atrule">handleFileUploads</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
    <span class="token comment"># 请求会话处理器配置属性</span>
    <span class="token key atrule">sessionOptions</span><span class="token punctuation">:</span> 
      <span class="token key atrule">sessionCookieName</span><span class="token punctuation">:</span> <span class="token string">&#39;mirage-restful.session&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上只是Restful的部分配置，如果想要了解全部配置信息，请查看 <code>MirageRestfulConfigProperties</code> 对象</p>`,6);function L(X,z){const c=d("CodeTabs");return u(),r("div",null,[m,l(c,{id:"91",data:[{title:"kotlin"},{title:"java"}],"tab-id":"language"},{tab0:a(({title:e,value:t,isActive:o})=>[v]),tab1:a(({title:e,value:t,isActive:o})=>[b]),_:1}),h,l(c,{id:"102",data:[{title:"kotlin"},{title:"java"}],"tab-id":"language"},{tab0:a(({title:e,value:t,isActive:o})=>[g]),tab1:a(({title:e,value:t,isActive:o})=>[f]),_:1}),y,l(c,{id:"199",data:[{title:"kotlin"},{title:"java"}],"tab-id":"language"},{tab0:a(({title:e,value:t,isActive:o})=>[x]),tab1:a(({title:e,value:t,isActive:o})=>[E]),_:1}),R,l(c,{id:"254",data:[{title:"kotlin"},{title:"java"}],"tab-id":"language"},{tab0:a(({title:e,value:t,isActive:o})=>[_]),tab1:a(({title:e,value:t,isActive:o})=>[w]),_:1}),H,l(c,{id:"324",data:[{title:"kotlin"},{title:"java"}],"tab-id":"language"},{tab0:a(({title:e,value:t,isActive:o})=>[C]),tab1:a(({title:e,value:t,isActive:o})=>[A]),_:1}),M,O,j,l(c,{id:"341",data:[{title:"kotlin"},{title:"java"}],"tab-id":"language"},{tab0:a(({title:e,value:t,isActive:o})=>[q]),tab1:a(({title:e,value:t,isActive:o})=>[B]),_:1}),I,l(c,{id:"560",data:[{title:"kotlin"},{title:"java"}],"tab-id":"language"},{tab0:a(({title:e,value:t,isActive:o})=>[T]),tab1:a(({title:e,value:t,isActive:o})=>[P]),_:1}),F,U,S,l(c,{id:"577",data:[{title:"kotlin"},{title:"java"}],"tab-id":"language"},{tab0:a(({title:e,value:t,isActive:o})=>[D]),tab1:a(({title:e,value:t,isActive:o})=>[V]),_:1}),W,l(c,{id:"655",data:[{title:"kotlin"},{title:"java"}],"tab-id":"language"},{tab0:a(({title:e,value:t,isActive:o})=>[G]),tab1:a(({title:e,value:t,isActive:o})=>[N]),_:1}),J])}const Y=p(k,[["render",L],["__file","restful.html.vue"]]);export{Y as default};
