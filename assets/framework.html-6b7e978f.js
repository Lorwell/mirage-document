import{_ as r,W as d,X as k,Y as i,Z as a,a1 as c,$ as n,a0 as s,C as u}from"./framework-c7bcd797.js";const m={},v=c('<h2 id="介绍" tabindex="-1"><a class="header-anchor" href="#介绍" aria-hidden="true">#</a> 介绍</h2><p>Mirage 的核心框架，其中包含了以下基础功能</p><ul><li><a href="#%E5%BA%94%E7%94%A8%E5%AF%B9%E8%B1%A1%E5%B7%A5%E5%8E%82">应用对象工厂</a></li><li><a href="#%E5%BA%94%E7%94%A8%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE">应用环境配置</a></li><li><a href="#%E5%BA%94%E7%94%A8%E4%BA%8B%E4%BB%B6%E7%B3%BB%E7%BB%9F">应用事件系统</a></li></ul><h2 id="应用对象工厂" tabindex="-1"><a class="header-anchor" href="#应用对象工厂" aria-hidden="true">#</a> 应用对象工厂</h2><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>mirage 的对象工厂，完全兼容 JSR 303的依赖注入规范</p></div><p>应用对象工厂，即 IOC（控制反转）+ DI（依赖注入）</p><p>即对象的创建，依赖注入的过程都将由对象工厂来完成，那么开发需要做的是在需要对象工厂管理的对象上使用指定注解来标识，这样在应用启动时，会自动扫描这些类并且加载到工厂中进行管理</p><p>那么如果定义一个工厂对象呢？，请继续往下看：</p><h3 id="定义工厂对象" tabindex="-1"><a class="header-anchor" href="#定义工厂对象" aria-hidden="true">#</a> 定义工厂对象</h3><p>使用 <code>@Component</code> 注解标识在对象上，即可标识为一个工厂对象。</p><p>如果未显式的定义对象的名称，则默认为类名首字母小写驼峰命名法，如果需要显示的定义使用 <code>@Component(value=&quot;对象名称&quot;)</code></p><p>示例：</p>',12),b=n("div",{class:"language-kotlin line-numbers-mode","data-ext":"kt"},[n("pre",{class:"language-kotlin"},[n("code",null,[n("span",{class:"token annotation builtin"},"@Slf4j"),s(`
`),n("span",{class:"token annotation builtin"},"@Component"),n("span",{class:"token punctuation"},"("),s("lazy "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token boolean"},"false"),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token keyword"},"class"),s(" TestComponent "),n("span",{class:"token operator"},":"),s(" InitializingBean "),n("span",{class:"token punctuation"},"{"),s(`

    `),n("span",{class:"token keyword"},"override"),s(),n("span",{class:"token keyword"},"fun"),s(),n("span",{class:"token keyword"},"init"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        log`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"info"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string-literal singleline"},[n("span",{class:"token string"},'"testComponent 初始化成功：'),n("span",{class:"token interpolation"},[n("span",{class:"token interpolation-punctuation punctuation"},"${"),n("span",{class:"token expression"},[n("span",{class:"token keyword"},"this")]),n("span",{class:"token interpolation-punctuation punctuation"},"}")]),n("span",{class:"token string"},'"')]),n("span",{class:"token punctuation"},")"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),g=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{class:"language-java"},[n("code",null,[n("span",{class:"token annotation punctuation"},"@Slf4j"),s(`
`),n("span",{class:"token annotation punctuation"},"@Component"),n("span",{class:"token punctuation"},"("),s("lazy "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token boolean"},"false"),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"TestComponent"),s(),n("span",{class:"token keyword"},"implements"),s(),n("span",{class:"token class-name"},"InitializingBean"),s(),n("span",{class:"token punctuation"},"{"),s(`

    `),n("span",{class:"token annotation punctuation"},"@Override"),s(`
    `),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"void"),s(),n("span",{class:"token function"},"init"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token keyword"},"throws"),s(),n("span",{class:"token class-name"},"Exception"),s(),n("span",{class:"token punctuation"},"{"),s(`
        log`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"info"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"testComponent 初始化成功：{}"'),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`

`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),h=n("p",null,[s("使用 "),n("code",null,"@Configuration"),s(" 注解标识在对象上，那么该对象将被标识为一个配置工厂对象，在该对象中使用 "),n("code",null,"@Bean"),s(" 标识方法来表示这是一个工厂对象方法。")],-1),y=n("p",null,[s("如果未显示的定义对象的名称则使用方法名作为对象名称，如果需要显示的定义使用 "),n("code",null,'@Bean(value="对象名称")')],-1),f=n("p",null,"示例：",-1),w=n("div",{class:"language-kotlin line-numbers-mode","data-ext":"kt"},[n("pre",{class:"language-kotlin"},[n("code",null,[n("span",{class:"token annotation builtin"},"@Configuration"),s(`
`),n("span",{class:"token keyword"},"class"),s(" TestConfiguration "),n("span",{class:"token punctuation"},"{"),s(`

    `),n("span",{class:"token annotation builtin"},"@Slf4j"),s(`
    `),n("span",{class:"token keyword"},"class"),s(" TestBean "),n("span",{class:"token operator"},":"),s(" InitializingBean "),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token keyword"},"override"),s(),n("span",{class:"token keyword"},"fun"),s(),n("span",{class:"token keyword"},"init"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
            log`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"info"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string-literal singleline"},[n("span",{class:"token string"},'"testBean 初始化成功：'),n("span",{class:"token interpolation"},[n("span",{class:"token interpolation-punctuation punctuation"},"${"),n("span",{class:"token expression"},[n("span",{class:"token keyword"},"this")]),n("span",{class:"token interpolation-punctuation punctuation"},"}")]),n("span",{class:"token string"},'"')]),n("span",{class:"token punctuation"},")"),s(`
        `),n("span",{class:"token punctuation"},"}"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`

    `),n("span",{class:"token annotation builtin"},"@Bean"),n("span",{class:"token punctuation"},"("),s("lazy "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token boolean"},"false"),n("span",{class:"token punctuation"},")"),s(`
    `),n("span",{class:"token keyword"},"fun"),s(),n("span",{class:"token function"},"testBean"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token operator"},":"),s(" TestBean "),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token function"},"TestBean"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),_=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{class:"language-java"},[n("code",null,[n("span",{class:"token annotation punctuation"},"@Configuration"),s(`
`),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"TestConfiguration"),s(),n("span",{class:"token punctuation"},"{"),s(`

    `),n("span",{class:"token annotation punctuation"},"@Slf4j"),s(`
    `),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"static"),s(),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"TestBean"),s(),n("span",{class:"token keyword"},"implements"),s(),n("span",{class:"token class-name"},"InitializingBean"),s(),n("span",{class:"token punctuation"},"{"),s(`

        `),n("span",{class:"token annotation punctuation"},"@Override"),s(`
        `),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"void"),s(),n("span",{class:"token function"},"init"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token keyword"},"throws"),s(),n("span",{class:"token class-name"},"Exception"),s(),n("span",{class:"token punctuation"},"{"),s(`
            log`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"info"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"testBean 初始化成功：{}"'),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token punctuation"},"}"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`

    `),n("span",{class:"token annotation punctuation"},"@Bean"),n("span",{class:"token punctuation"},"("),s("lazy "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token boolean"},"false"),n("span",{class:"token punctuation"},")"),s(`
    `),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token class-name"},"TestBean"),s(),n("span",{class:"token function"},"testBean"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"TestBean"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),B=c('<div class="hint-container info"><p class="hint-container-title">懒加载</p><p>默认情况下工厂对象都是懒加载的，如果需要定义非懒加载对象可以通过 <code>@Component(lazy = false)</code> 或者 <code>@Bean(lazy = false)</code> 来定义，非懒加载对象将在应用工厂所有的类型扫描完成后，进行实例化。</p></div><h3 id="工厂对象扫描" tabindex="-1"><a class="header-anchor" href="#工厂对象扫描" aria-hidden="true">#</a> 工厂对象扫描</h3><p>默认情况下，优先扫描<strong>启动类的包路径及其子路径中所有定义的工厂对象</strong>，接着将加载 <a href="#spi-%E6%9C%BA%E5%88%B6">SPI 机制</a> 中的自动装配对象，如果扫描到对象标识着 <code>@ComponentScan</code> 注解，则基于该注解定义的路径继续扫描。</p><h4 id="import" tabindex="-1"><a class="header-anchor" href="#import" aria-hidden="true">#</a> @Import</h4><p>在工厂的配置对象（即：<code>@Configuration</code>注解标识的对象）上可以使用 <code>@Import</code> 注解来导入指定类，结合 <code>ImportBeanDescriptionRegistrar</code> 接口可以在运行时添加自定义的 <code>BeanDescription</code> 到对象工厂中，以下是一个示例：</p><p><strong>导入普通组件示例：</strong></p>',6),x=n("div",{class:"language-kotlin line-numbers-mode","data-ext":"kt"},[n("pre",{class:"language-kotlin"},[n("code",null,[n("span",{class:"token annotation builtin"},"@Component"),s(`
`),n("span",{class:"token keyword"},"class"),s(` MirageComponent

`),n("span",{class:"token annotation builtin"},"@Configuration"),s(`
`),n("span",{class:"token annotation builtin"},"@Import"),n("span",{class:"token punctuation"},"("),s("MirageComponent"),n("span",{class:"token operator"},"::"),n("span",{class:"token keyword"},"class"),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token keyword"},"class"),s(` MirageConfiguration
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),E=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{class:"language-java"},[n("code",null,[n("span",{class:"token annotation punctuation"},"@Component"),s(`
`),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"MirageComponent"),n("span",{class:"token punctuation"},"{"),s(`

`),n("span",{class:"token punctuation"},"}"),s(`

`),n("span",{class:"token annotation punctuation"},"@Import"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"MirageComponent"),n("span",{class:"token punctuation"},"."),n("span",{class:"token keyword"},"class"),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token annotation punctuation"},"@Configuration"),s(`
`),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"MirageConfiguration"),s(),n("span",{class:"token punctuation"},"{"),s(`

`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),A=n("p",null,[n("strong",null,"导入BeanDescription的示例：")],-1),C=n("div",{class:"language-kotlin line-numbers-mode","data-ext":"kt"},[n("pre",{class:"language-kotlin"},[n("code",null,[n("span",{class:"token keyword"},"class"),s(" MirageBeanDefinitionRegistrar "),n("span",{class:"token operator"},":"),s(" ImportBeanDescriptionRegistrar "),n("span",{class:"token punctuation"},"{"),s(`

     `),n("span",{class:"token keyword"},"override"),s(),n("span",{class:"token keyword"},"fun"),s(),n("span",{class:"token function"},"registerBeanDescriptions"),n("span",{class:"token punctuation"},"("),s(` 
         annotatedMetadata`),n("span",{class:"token operator"},":"),s(" AnnotatedElementMetadata"),n("span",{class:"token punctuation"},","),s(`
         registry`),n("span",{class:"token operator"},":"),s(" BeanDescriptionRegistry"),n("span",{class:"token punctuation"},","),s(`
         beanKeyLoader`),n("span",{class:"token operator"},":"),s(" BeanKeyLoader"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
     `),n("span",{class:"token comment"},"// @Import 定义在 @EnableDemo 注解上，目的是可以使用 annotatedMetadata 获取该注解的元数据，以达到作为配置注解的目的"),s(`
     `),n("span",{class:"token comment"},"// 可以使用 beanKeyLoader 来扫描指定目录或指定类的 BeanKey 作为 BeanDescription 的唯一键"),s(`
     `),n("span",{class:"token comment"},"// 使用 registry 注入 BeanDescription"),s(`
   `),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`

`),n("span",{class:"token annotation builtin"},"@Target"),n("span",{class:"token punctuation"},"("),s("CLASS"),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token annotation builtin"},"@Retention"),n("span",{class:"token punctuation"},"("),s("RUNTIME"),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token annotation builtin"},"@Import"),n("span",{class:"token punctuation"},"("),s("MirageBeanDefinitionRegistrar"),n("span",{class:"token operator"},"::"),n("span",{class:"token keyword"},"class"),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token keyword"},"annotation"),s(),n("span",{class:"token keyword"},"class"),s(` EnableDemo

`),n("span",{class:"token annotation builtin"},"@EnableDemo"),s(`
`),n("span",{class:"token annotation builtin"},"@Configuration"),s(`
`),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"class"),s(` MirageConfig
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),j=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{class:"language-java"},[n("code",null,[n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"MirageBeanDefinitionRegistrar"),s(),n("span",{class:"token keyword"},"implements"),s(),n("span",{class:"token class-name"},"ImportBeanDescriptionRegistrar"),s(),n("span",{class:"token punctuation"},"{"),s(`

    `),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token class-name"},"MirageBeanDefinitionRegistrar"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"}"),s(`

    `),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"void"),s(),n("span",{class:"token function"},"registerBeanDescriptions"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"AnnotatedElementMetadata"),s(" annotatedMetadata"),n("span",{class:"token punctuation"},","),s(`
                                         `),n("span",{class:"token class-name"},"BeanDescriptionRegistry"),s(" registry"),n("span",{class:"token punctuation"},","),s(`
                                         `),n("span",{class:"token class-name"},"BeanKeyLoader"),s(" beanKeyLoader"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
     `),n("span",{class:"token comment"},"// @Import 定义在 @EnableDemo 注解上，目的是可以使用 annotatedMetadata 获取该注解的元数据，以达到作为配置注解的目的"),s(`
     `),n("span",{class:"token comment"},"// 可以使用 beanKeyLoader 来扫描指定目录或指定类的 BeanKey 作为 BeanDescription 的唯一键"),s(`
     `),n("span",{class:"token comment"},"// 使用 registry 注入 BeanDescription"),s(`
   `),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`

`),n("span",{class:"token annotation punctuation"},"@Target"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"ElementType"),n("span",{class:"token punctuation"},"."),n("span",{class:"token constant"},"TYPE"),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token annotation punctuation"},"@Retention"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"RetentionPolicy"),n("span",{class:"token punctuation"},"."),n("span",{class:"token constant"},"RUNTIME"),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token annotation punctuation"},"@Documented"),s(`
`),n("span",{class:"token annotation punctuation"},"@Import"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"MirageBeanDefinitionRegistrar"),n("span",{class:"token punctuation"},"."),n("span",{class:"token keyword"},"class"),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token annotation punctuation"},"@interface"),s(),n("span",{class:"token class-name"},"EnableDemo"),s(),n("span",{class:"token punctuation"},"{"),s(`

`),n("span",{class:"token punctuation"},"}"),s(`

`),n("span",{class:"token annotation punctuation"},"@EnableDemo"),s(`
`),n("span",{class:"token annotation punctuation"},"@Configuration"),s(`
`),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"MirageConfig"),s(),n("span",{class:"token punctuation"},"{"),s(`

`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),D=c('<div class="hint-container warning"><p class="hint-container-title">注意</p><p>需要注意的是：<code>ImportBeanDescriptionRegistrar</code>接口的实现必须存在无参构造函数，将用来初始化该对象。</p><p><code>ImportBeanDescriptionRegistrar</code>接口的实现不会添加到对象工厂中，但是支持 <code>Aware</code> 接口的注入</p></div><h3 id="对象生命周期" tabindex="-1"><a class="header-anchor" href="#对象生命周期" aria-hidden="true">#</a> 对象生命周期</h3><div class="hint-container info"><p class="hint-container-title">作用域</p><p>这里值得一提的是，被对象工厂管理的实例，它的作用域一定是单例的，对于 <strong>原型对象</strong>对象，即：工厂每次都会创建一个对象，创建好后将不会继续管理后续的生命周期，交由使用者进行管理。</p><p>如果需要定义原型对象则需要额外使用 <code>@Prototype</code>注解标识</p></div>',3),I=c(`<p>通过以上的生命周期图中可以看出在对象创建的过程中定义了一些回调方法，用于参与对象的创建。</p><h4 id="实例化" tabindex="-1"><a class="header-anchor" href="#实例化" aria-hidden="true">#</a> 实例化</h4><p>对象的实例化是通过构造函数完成的，那么如果该对象只存在一个构造函数（无论是否私有），则使用它，如果该对象存在多个构造函数，那么存在一个判断逻辑，<strong>构造函数必须的<code>public</code>的且必须标识 <code>@Inject</code> 或者 <code>@Autowired</code>注解</strong>，如果匹配到多个那么将抛出例外！</p><div class="hint-container warning"><p class="hint-container-title">循环依赖</p><p>请注意，当前版本不尝试解决任何形式的循环注入问题，即不可以 A实例是B实例的依赖性，同时B实例又是A实例的依赖项。这样的情况将导致获取该实例对象时抛出<code>BeanException</code>异常！</p></div><h4 id="依赖注入" tabindex="-1"><a class="header-anchor" href="#依赖注入" aria-hidden="true">#</a> 依赖注入</h4><p>依赖注入分为两种，对象属性注入和对象方法注入。</p><p>对象属性注入条件：</p><ul><li>非静态属性</li><li>非 final 属性</li><li>属性上使用 <code>@Inject</code> 或 <code>@Autowired</code>注解</li></ul><p>对象方法注入条件：</p><ul><li>非静态方法</li><li>public 标识的方法</li><li>方法是上使用 <code>@Inject</code> 或 <code>@Autowired</code>注解</li><li>非被重写的方法</li></ul><div class="hint-container info"><p class="hint-container-title">依赖名称注入</p><p>默认情况下依赖注入使用类型注入，如果出现多个匹配的类型将抛出例外！</p><p>如果需要通过名称进行注入，则需要使用 <code>@Named</code>注解定义注入对象的名称。</p><p>如果你想为指定对象标识一个类型，通过它来完成依赖注入，可以参考 <code>jakarta.inject.Qualifier</code>，通过自定义注解的方式匹配工厂对象</p></div><h4 id="初始化" tabindex="-1"><a class="header-anchor" href="#初始化" aria-hidden="true">#</a> 初始化</h4><p>如果对象实现了接口 <code>InitializingBean</code>，那么在初始化这个生命周期时，将回调 <code>InitializingBean#init</code> 方法，可以在该方法中进行一些对象初始化逻辑</p><h4 id="aware" tabindex="-1"><a class="header-anchor" href="#aware" aria-hidden="true">#</a> Aware</h4><p><code>Aware</code>即感知，在对象创建的过程中，可以实现 <code>Aware</code> 定义一些子接口，用于获取特定的对象实例。</p><ul><li>BeanFactoryAware 对象工厂感知接口，可以获取当前应用的工厂对象 <code>BeanFactory</code></li><li>BeanNameAware 对象名称感知接口，可以获取当前对象实例在对象工厂中的名称</li><li>EnvironmentAware 环境对象感知接口，可以获取当前应用的环境配置对象 <code>Environment</code></li><li>ApplicationContextAware 应用上下文感知接口，可以获取当前应用的上下文对象 <code>ApplicationContext</code></li></ul><h4 id="beanpostprocessor" tabindex="-1"><a class="header-anchor" href="#beanpostprocessor" aria-hidden="true">#</a> BeanPostProcessor</h4><p><code>BeanPostProcessor</code>即对象的后置处理器，在工厂对象实例初始化前和初始化后可以做一些特定的操作。</p><p>比如：环境配置注解 <code>ConfigurationProperties</code> 的实现就是依赖 <code>BeanPostProcessor</code> 完成的，在实例初始化前判断该对象类是否标识 <code>ConfigurationProperties</code>注解，如果标识则进行配置属性绑定。</p><p>您也可以基于 <code>BeanPostProcessor</code> 的机制做一些特定的操作，比如生成代理对象？</p><div class="hint-container warning"><p class="hint-container-title">AOP</p><p>需要注意的是：mirage 目前不支持aop</p></div><div class="hint-container info"><p class="hint-container-title">相关信息</p><p><code>BeanPostProcessor</code> 的对象配置基于 <a href="#spi-%E6%9C%BA%E5%88%B6">SPI 机制</a> 实现，也被视为对象工厂中的对象，在此我们建议 <code>BeanPostProcessor</code> 不要存在对象依赖，因为这将导致这些依赖对象的创建时机被提到 <code>BeanPostProcessor</code> 之前</p></div><h3 id="工厂对象覆盖" tabindex="-1"><a class="header-anchor" href="#工厂对象覆盖" aria-hidden="true">#</a> 工厂对象覆盖</h3><p>mirage 使用约定大于配置的方式构建应用，那么在一些场景上，可能不太满足，这个时候需要将原有对象排除使用自定义的注入对象，为此我们提供了以下两种方式</p><h4 id="条件覆盖" tabindex="-1"><a class="header-anchor" href="#条件覆盖" aria-hidden="true">#</a> 条件覆盖</h4><p>条件覆盖通过在定义工厂对象上标识 <code>@Conditional</code> 注解的方式来完成，<code>@Conditional#value</code> 属性为 <code>Condition</code>接口类型，实现该接口定义工厂对象条件覆盖的具体逻辑即可。</p><p>需要注意的是 <code>Condition</code> 的实现对象，必须提供一个无参构造函数，否则将无法初始化该对象。</p><p>mirage 内部提供了一些 <code>@Conditional</code> 的实现，可以使用以下注解</p><ul><li><code>@ConditionalOnClass</code> ：当存在指定类时加载</li><li><code>@ConditionalOnMissingBean</code>：当不存在指定的对象，那么将当前对象添加到对象工厂中</li></ul><h4 id="对象排除" tabindex="-1"><a class="header-anchor" href="#对象排除" aria-hidden="true">#</a> 对象排除</h4><p>对象排除一般来说不建议使用，我们更加建议通过条件覆盖的方式。</p><p>如果必须要使用对象排除，则需要使用 <code>@ExcludeComponent</code> 注解定义排除的对象类型或者对象名称，也可以通过 <a href="#spi-%E6%9C%BA%E5%88%B6">SPI 机制</a> 排除指定类型</p><div class="hint-container warning"><p class="hint-container-title">排除对象</p><p>需要注意的是：如果该对象已经完成了初始化，那么该对象就无法被排除</p></div><h3 id="spi-机制" tabindex="-1"><a class="header-anchor" href="#spi-机制" aria-hidden="true">#</a> SPI 机制</h3><p>mirage 的 SPI 机制通过在资源目录下定义 <code>META-INF\\mirageFactories.properties</code> 配置文件的方式，以下是一份参考</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token comment"># 自动装配的类</span>
<span class="token key attr-name">factories.autoConfiguration</span><span class="token punctuation">=</span><span class="token value attr-value">\\
  cc.shacocloud.mirage.context.MirageVertxConfiguration,\\
  cc.shacocloud.mirage.context.MirageVertxProperties</span>
<span class="token comment"># 排除的组件</span>
<span class="token key attr-name">factories.excludeComponent</span><span class="token punctuation">=</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如上所示，通过全类名的方式定义，多个英文半角逗号分割</p><ul><li>factories.autoConfiguration：为自动装配的一些类</li><li>factories.excludeComponent：为需要排除的对象类型</li></ul><h3 id="vertx-verticle组件" tabindex="-1"><a class="header-anchor" href="#vertx-verticle组件" aria-hidden="true">#</a> Vertx Verticle组件</h3><p>mirage 自定义了 <code>VerticleFactory</code>，所以 <code>Vertx</code> 的 <code>Verticle</code> 都可以使用组件的方式存在于 mirage 中，因此我们提供了 <code>@DeployVerticle</code> 注解用于定义 <code>Verticle</code> 组件，以下是一份示例：</p>`,40),M=n("div",{class:"language-kotlin line-numbers-mode","data-ext":"kt"},[n("pre",{class:"language-kotlin"},[n("code",null,[n("span",{class:"token annotation builtin"},"@Slf4j"),s(`
`),n("span",{class:"token annotation builtin"},"@DeployVerticle"),n("span",{class:"token punctuation"},"("),s("instances "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token keyword"},"class"),s(" TestVerticle "),n("span",{class:"token operator"},":"),s(),n("span",{class:"token function"},"CoroutineVerticle"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`

    `),n("span",{class:"token keyword"},"companion"),s(),n("span",{class:"token keyword"},"object"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token keyword"},"val"),s(" i "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token function"},"AtomicInteger"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},")"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`

    `),n("span",{class:"token keyword"},"private"),s(),n("span",{class:"token keyword"},"var"),s(" num"),n("span",{class:"token operator"},":"),s(" Int "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token operator"},"-"),n("span",{class:"token number"},"1"),s(`

    `),n("span",{class:"token keyword"},"override"),s(),n("span",{class:"token keyword"},"suspend"),s(),n("span",{class:"token keyword"},"fun"),s(),n("span",{class:"token function"},"start"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        num `),n("span",{class:"token operator"},"="),s(" i"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"incrementAndGet"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(`
        log`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"info"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string-literal singleline"},[n("span",{class:"token string"},'"TestVerticle start '),n("span",{class:"token interpolation"},[n("span",{class:"token interpolation-punctuation punctuation"},"$"),n("span",{class:"token expression"},"num")]),n("span",{class:"token string"},'"')]),n("span",{class:"token punctuation"},")"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`

    `),n("span",{class:"token keyword"},"override"),s(),n("span",{class:"token keyword"},"suspend"),s(),n("span",{class:"token keyword"},"fun"),s(),n("span",{class:"token function"},"stop"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        log`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"info"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string-literal singleline"},[n("span",{class:"token string"},'"TestVerticle stop '),n("span",{class:"token interpolation"},[n("span",{class:"token interpolation-punctuation punctuation"},"$"),n("span",{class:"token expression"},"num")]),n("span",{class:"token string"},'"')]),n("span",{class:"token punctuation"},")"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),P=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{class:"language-java"},[n("code",null,[n("span",{class:"token annotation punctuation"},"@Slf4j"),s(`
`),n("span",{class:"token annotation punctuation"},"@DeployVerticle"),n("span",{class:"token punctuation"},"("),s("instances "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"TestVerticle"),s(),n("span",{class:"token keyword"},"extends"),s(),n("span",{class:"token class-name"},"AbstractVerticle"),s(),n("span",{class:"token punctuation"},"{"),s(`

    `),n("span",{class:"token keyword"},"private"),s(),n("span",{class:"token keyword"},"static"),s(),n("span",{class:"token keyword"},"final"),s(),n("span",{class:"token class-name"},"AtomicInteger"),s(" i "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"AtomicInteger"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

    `),n("span",{class:"token keyword"},"private"),s(),n("span",{class:"token class-name"},"Integer"),s(" num"),n("span",{class:"token punctuation"},";"),s(`

    `),n("span",{class:"token annotation punctuation"},"@Override"),s(`
    `),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"void"),s(),n("span",{class:"token function"},"start"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token keyword"},"throws"),s(),n("span",{class:"token class-name"},"Exception"),s(),n("span",{class:"token punctuation"},"{"),s(`
        num `),n("span",{class:"token operator"},"="),s(" i"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"incrementAndGet"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        log`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"info"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"TestVerticle start {}"'),n("span",{class:"token punctuation"},","),s(" num"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`

    `),n("span",{class:"token annotation punctuation"},"@Override"),s(`
    `),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"void"),s(),n("span",{class:"token function"},"stop"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token keyword"},"throws"),s(),n("span",{class:"token class-name"},"Exception"),s(),n("span",{class:"token punctuation"},"{"),s(`
        log`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"info"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"TestVerticle stop {}"'),n("span",{class:"token punctuation"},","),s(" num"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

    `),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),S=c(`<p>以上的示例可以得到2个 <code>TestVerticle</code> 实例，其启动/关闭时打印的日志中都有对应的序号。</p><div class="hint-container info"><p class="hint-container-title">相关信息</p><p><code>@DeployVerticle</code> 标识类都是原型对象，即每次获取都将创建一个新的对象</p></div><h2 id="应用环境配置" tabindex="-1"><a class="header-anchor" href="#应用环境配置" aria-hidden="true">#</a> 应用环境配置</h2><p>系统的环境配置提供了2个内置的配置文件，路径都是相对于资源目录，文件不存在则不加载</p><ul><li>环境配置文件：<code>environment.yaml</code> 用于定义环境配置信息，可以在其中配置不同环境读取的配置文件</li><li>应用配置文件：<code>application.yaml</code> 用于定义应用配置信息，内置配置文件。即：无论环境配置中是否定义，该文件都会加载</li></ul><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>系统支持3种文件格式，分别是 yaml，json，properties，所以上面的2个配置文件使用 <code>environment.json</code>，<code>environment.properties</code>，<code>application.json</code>，<code>application.properties</code> 也可以</p></div><h3 id="环境配置文件" tabindex="-1"><a class="header-anchor" href="#环境配置文件" aria-hidden="true">#</a> 环境配置文件</h3><p>在环境配置文件中可以定义不同环境下加载的配置文件，示例如下：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">mirage</span><span class="token punctuation">:</span>
  <span class="token key atrule">environment</span><span class="token punctuation">:</span>
    <span class="token comment"># 激活的环境</span>
    <span class="token key atrule">active</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>mirage_environment_active<span class="token punctuation">:</span>dev<span class="token punctuation">}</span>
    <span class="token comment"># 配置文件刷新间隔，默认是5秒</span>
    <span class="token key atrule">refresh</span><span class="token punctuation">:</span> <span class="token number">5000</span>
    <span class="token comment"># 环境配置集</span>
    <span class="token key atrule">profiles</span><span class="token punctuation">:</span>
     <span class="token comment"># 环境名称和 mirage.environment.active 对应</span>
      <span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> dev
      <span class="token comment"># 环境存储信息</span>
        <span class="token key atrule">stores</span><span class="token punctuation">:</span>
          <span class="token comment"># classpath:// 表示类路径加载</span>
          <span class="token punctuation">-</span> <span class="token key atrule">path</span><span class="token punctuation">:</span> classpath<span class="token punctuation">:</span>//application<span class="token punctuation">-</span>dev.yaml
          <span class="token comment"># https:// 表示远端加载</span>
          <span class="token punctuation">-</span> <span class="token key atrule">path</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//gitee.com/lulihu/mirage<span class="token punctuation">-</span>demo/raw/master/mirage<span class="token punctuation">-</span>kotlin<span class="token punctuation">-</span>demo/src/main/resources/application<span class="token punctuation">-</span>dev1.yaml
            <span class="token key atrule">headers</span><span class="token punctuation">:</span>
              <span class="token key atrule">client</span><span class="token punctuation">:</span> mirage demo
            <span class="token comment"># file:// 表示文件系统加载，绝对路径</span>
          <span class="token punctuation">-</span> <span class="token key atrule">path</span><span class="token punctuation">:</span> file<span class="token punctuation">:</span>///opt/app/application<span class="token punctuation">-</span>dev2.yaml
            <span class="token comment"># optional 如果为 true 表示为可选的，即：文件不存在则忽略，默认为 false 不存在将抛出例外</span>
            <span class="token key atrule">optional</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
      <span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> uat
        <span class="token key atrule">stores</span><span class="token punctuation">:</span>
          <span class="token punctuation">-</span> <span class="token key atrule">path</span><span class="token punctuation">:</span> classpath<span class="token punctuation">:</span>//application<span class="token punctuation">-</span>uat.yaml
          <span class="token punctuation">-</span> <span class="token key atrule">path</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//gitee.com/lulihu/mirage<span class="token punctuation">-</span>demo/raw/master/mirage<span class="token punctuation">-</span>kotlin<span class="token punctuation">-</span>demo/src/main/resources/application<span class="token punctuation">-</span>uat1.yaml
            <span class="token key atrule">headers</span><span class="token punctuation">:</span>
              <span class="token key atrule">client</span><span class="token punctuation">:</span> mirage demo
          <span class="token punctuation">-</span> <span class="token key atrule">path</span><span class="token punctuation">:</span> file<span class="token punctuation">:</span>///opt/app/application<span class="token punctuation">-</span>uat2.yaml
            <span class="token key atrule">optional</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从以上配置信息示例可以看出，目前系统支持3种配置文件加载方式，分别是</p><ul><li>类路径加载：使用 <code>classpath://</code> 作为路径前缀</li><li>文件系统加载：使用 <code>file://</code> 作为路径前缀</li><li>远端请求加载：使用 <code>http://</code>或者<code>https://</code> 作为路径前缀，如果使用该方式可以通过 <code>headers</code>属性配置请求时携带的自定义头部信息</li></ul><p>如果指定配置路径文件有可能不存在，那么可以将 <code>optional</code> 属性定义 true，表示为文件不存在则忽略，默认为 false 不存在将抛出例外</p><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>在所有的配置文件信息中，字符串的内容都会被当做表达式内容进行表达式替换，比如：<code>\${mirage_environment_active:dev}</code> 表示为 如果 mirage_environment_active 配置键的值存在则使用，否则使用 dev 作为值</p><p>配置的键可以使用中划线分割字符，例如 <code>mirage.vertx.event-loop-pool-size</code> 等效于 <code>mirage.vertx.eventLoopPoolSize</code></p></div><h3 id="配置文件加载顺序" tabindex="-1"><a class="header-anchor" href="#配置文件加载顺序" aria-hidden="true">#</a> 配置文件加载顺序</h3>`,14),V=c('<p>配置的顺序非常重要， 因为它定义了覆盖顺序。对于冲突的key， 后声明的配置中心会覆盖之前的。我们举个例子。 我们有两个配置：</p><ul><li><code>A</code> 提供 <code>{a:value, b:1}</code> 配置</li><li><code>B</code> 提供 <code>{a:value2, c:2}</code> 配置</li></ul><p>以 A，B 的顺序声明配置，最终配置应该为： <code>{a:value2, b:1, c:2}</code></p><p>如果您将声明的顺序反过来（B，A），那么您会得到 <code>{a:value, b:1, c:2}</code></p><h3 id="配置注入" tabindex="-1"><a class="header-anchor" href="#配置注入" aria-hidden="true">#</a> 配置注入</h3><p>系统提供了一下注解，用于注入配置信息到指定的对象中</p><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>环境配置每隔 <code>mirage.environment.refresh</code>重新加载一次配置信息，如果配置发生了变更将发布应用事件 <code>EnvironmentChangeEvent</code> ，且所有的配置对象都将被重新注入新的值</p></div><h4 id="configurationproperties" tabindex="-1"><a class="header-anchor" href="#configurationproperties" aria-hidden="true">#</a> @ConfigurationProperties</h4><p>配置属性注解，在对象类上使用了该注解后，该对象的所有<strong>Set方法</strong>都将被视为配置属性的注入点。</p><p>示例：</p>',10),T=n("div",{class:"language-kotlin line-numbers-mode","data-ext":"kt"},[n("pre",{class:"language-kotlin"},[n("code",null,[n("span",{class:"token annotation builtin"},"@ConfigurationProperties"),n("span",{class:"token punctuation"},"("),s("prefix "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string-literal singleline"},[n("span",{class:"token string"},'"mirage.demo"')]),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token keyword"},"class"),s(" MirageDemoProperties "),n("span",{class:"token punctuation"},"{"),s(`

    `),n("span",{class:"token keyword"},"var"),s(" dev"),n("span",{class:"token operator"},":"),s(" String "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string-literal singleline"},[n("span",{class:"token string"},'""')]),s(`
    `),n("span",{class:"token keyword"},"var"),s(" dev1"),n("span",{class:"token operator"},":"),s(" String "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string-literal singleline"},[n("span",{class:"token string"},'""')]),s(`

`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),L=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{class:"language-java"},[n("code",null,[n("span",{class:"token annotation punctuation"},"@Setter"),s(`
`),n("span",{class:"token annotation punctuation"},"@Getter"),s(`
`),n("span",{class:"token annotation punctuation"},"@NoArgsConstructor"),s(`
`),n("span",{class:"token annotation punctuation"},"@ConfigurationProperties"),n("span",{class:"token punctuation"},"("),s("prefix "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string"},'"mirage.demo"'),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"MirageDemoProperties"),s(),n("span",{class:"token punctuation"},"{"),s(`

    `),n("span",{class:"token keyword"},"private"),s(),n("span",{class:"token class-name"},"String"),s(" dev"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"private"),s(),n("span",{class:"token class-name"},"String"),s(" dev1"),n("span",{class:"token punctuation"},";"),s(`

`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),z=n("h4",{id:"envvalue",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#envvalue","aria-hidden":"true"},"#"),s(" @EnvValue")],-1),R=n("p",null,[s("环境值注解，使用其定义在工厂对象的属性或者"),n("strong",null,"Set方法"),s("上，即可为这个工厂对象注入环境配置信息。")],-1),F=n("p",null,"示例：",-1),N=n("p",null,"属性注入",-1),J=n("div",{class:"language-kotlin line-numbers-mode","data-ext":"kt"},[n("pre",{class:"language-kotlin"},[n("code",null,[n("span",{class:"token annotation builtin"},"@Component"),s(`
`),n("span",{class:"token keyword"},"class"),s(" MirageDemoBean "),n("span",{class:"token punctuation"},"{"),s(`

    `),n("span",{class:"token annotation builtin"},"@EnvValue"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string-literal singleline"},[n("span",{class:"token string"},'"\\${mirage.demo.dev1}"')]),n("span",{class:"token punctuation"},")"),s(`
    `),n("span",{class:"token keyword"},"private"),s(),n("span",{class:"token keyword"},"var"),s(" dev1"),n("span",{class:"token operator"},":"),s(" String "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string-literal singleline"},[n("span",{class:"token string"},'""')]),s(`

`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),$=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{class:"language-java"},[n("code",null,[n("span",{class:"token annotation punctuation"},"@Component"),s(`
`),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"MirageDemoBean"),s(),n("span",{class:"token punctuation"},"{"),s(`

   `),n("span",{class:"token annotation punctuation"},"@EnvValue"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"${mirage.demo.dev1}"'),n("span",{class:"token punctuation"},")"),s(`
   `),n("span",{class:"token keyword"},"private"),s(),n("span",{class:"token class-name"},"String"),s(" dev1"),n("span",{class:"token punctuation"},";"),s(`

`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),K=n("p",null,"方法注入",-1),O=n("div",{class:"language-kotlin line-numbers-mode","data-ext":"kt"},[n("pre",{class:"language-kotlin"},[n("code",null,[n("span",{class:"token annotation builtin"},"@Component"),s(`
`),n("span",{class:"token keyword"},"class"),s(" MirageDemoBean "),n("span",{class:"token punctuation"},"{"),s(`
    
    `),n("span",{class:"token keyword"},"private"),s(),n("span",{class:"token keyword"},"lateinit"),s(),n("span",{class:"token keyword"},"var"),s(" dev1"),n("span",{class:"token operator"},":"),s(` String

    `),n("span",{class:"token annotation builtin"},"@EnvValue"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string-literal singleline"},[n("span",{class:"token string"},'"\\${mirage.demo.dev1}"')]),n("span",{class:"token punctuation"},")"),s(`
    `),n("span",{class:"token keyword"},"fun"),s(),n("span",{class:"token function"},"setDev1"),n("span",{class:"token punctuation"},"("),s("dev1"),n("span",{class:"token operator"},":"),s(" String"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("dev1 "),n("span",{class:"token operator"},"="),s(" dev1"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`

`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),U=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{class:"language-java"},[n("code",null,[n("span",{class:"token annotation punctuation"},"@Component"),s(`
`),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"MirageDemoBean"),s(),n("span",{class:"token punctuation"},"{"),s(`

   `),n("span",{class:"token keyword"},"private"),s(),n("span",{class:"token class-name"},"String"),s(" dev1"),n("span",{class:"token punctuation"},";"),s(`

   `),n("span",{class:"token annotation punctuation"},"@EnvValue"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"${mirage.demo.dev1}"'),n("span",{class:"token punctuation"},")"),s(`
   `),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"void"),s(),n("span",{class:"token function"},"setDev1"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"String"),s(" dev1"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("dev1 "),n("span",{class:"token operator"},"="),s(" dev1"),n("span",{class:"token punctuation"},";"),s(`
   `),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),Y=c(`<div class="hint-container warning"><p class="hint-container-title">注意</p><p>注意：set 方法必须满足以下几个条件</p><p>方法名称必须以 set 为前缀，且 set 的下一个字符大写</p><p>方法必须只有一个入参</p></div><h3 id="vertx-配置" tabindex="-1"><a class="header-anchor" href="#vertx-配置" aria-hidden="true">#</a> Vertx 配置</h3><p>通过应用环境配置机制可以基于<code>MirageVertxProperties</code>对象配置 <code>Vertx</code> 对象的一些属性，以下是一部分配置示例：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">mirage</span><span class="token punctuation">:</span>
  <span class="token key atrule">vertx</span><span class="token punctuation">:</span> 
    <span class="token key atrule">eventLoopPoolSize</span><span class="token punctuation">:</span> <span class="token number">2</span>
    <span class="token key atrule">workerPoolSize</span><span class="token punctuation">:</span> <span class="token number">20</span>
    <span class="token key atrule">internalBlockingPoolSize</span><span class="token punctuation">:</span> <span class="token number">20</span>
    <span class="token key atrule">blockedThreadCheckInterval</span><span class="token punctuation">:</span> <span class="token number">1000</span>
    <span class="token key atrule">maxEventLoopExecuteTime</span><span class="token punctuation">:</span> <span class="token number">2000</span>
    <span class="token key atrule">maxWorkerExecuteTime</span><span class="token punctuation">:</span> <span class="token number">60000</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="应用事件系统" tabindex="-1"><a class="header-anchor" href="#应用事件系统" aria-hidden="true">#</a> 应用事件系统</h2><p>当应用运行到某个阶段事件，将会发出应用事件，工厂对象通过实现 <code>ApplicationListener</code> 来定义监听的事件，当该事件发生时将会触发 <code>ApplicationListener#onApplicationEvent</code>方法。</p><p>示例：</p>`,7),Z=n("div",{class:"language-kotlin line-numbers-mode","data-ext":"kt"},[n("pre",{class:"language-kotlin"},[n("code",null,[n("span",{class:"token annotation builtin"},"@Slf4j"),s(`
`),n("span",{class:"token annotation builtin"},"@Component"),s(`
`),n("span",{class:"token keyword"},"class"),s(" MirageDemoEventBean "),n("span",{class:"token operator"},":"),s(" CoroutineApplicationListener"),n("span",{class:"token operator"},"<"),s("EnvironmentChangeEvent"),n("span",{class:"token operator"},">"),s(),n("span",{class:"token punctuation"},"{"),s(`

    `),n("span",{class:"token keyword"},"override"),s(),n("span",{class:"token keyword"},"suspend"),s(),n("span",{class:"token keyword"},"fun"),s(),n("span",{class:"token function"},"doApplicationEvent"),n("span",{class:"token punctuation"},"("),s("event"),n("span",{class:"token operator"},":"),s(" EnvironmentChangeEvent"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        log`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"info"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string-literal singleline"},[n("span",{class:"token string"},'"配置发生变更..."')]),n("span",{class:"token punctuation"},")"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`

`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),q=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{class:"language-java"},[n("code",null,[n("span",{class:"token annotation punctuation"},"@Slf4j"),s(`
`),n("span",{class:"token annotation punctuation"},"@Component"),s(`
`),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"MirageDemoEventBean"),s(),n("span",{class:"token keyword"},"implements"),s(),n("span",{class:"token class-name"},"ApplicationListener"),n("span",{class:"token generics"},[n("span",{class:"token punctuation"},"<"),n("span",{class:"token class-name"},"EnvironmentChangeEvent"),n("span",{class:"token punctuation"},">")]),s(),n("span",{class:"token punctuation"},"{"),s(`

    `),n("span",{class:"token annotation punctuation"},"@Override"),s(`
    `),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token class-name"},"Future"),n("span",{class:"token generics"},[n("span",{class:"token punctuation"},"<"),n("span",{class:"token class-name"},"Void"),n("span",{class:"token punctuation"},">")]),s(),n("span",{class:"token function"},"onApplicationEvent"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"EnvironmentChangeEvent"),s(" event"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        log`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"info"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"配置发生变更..."'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token class-name"},"Future"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"succeededFuture"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),G=n("h3",{id:"自定义事件",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#自定义事件","aria-hidden":"true"},"#"),s(" 自定义事件")],-1),X=n("p",null,"示例：",-1),H=n("div",{class:"language-kotlin line-numbers-mode","data-ext":"kt"},[n("pre",{class:"language-kotlin"},[n("code",null,[n("span",{class:"token comment"},"// 定义自定义事件对象"),s(`
`),n("span",{class:"token keyword"},"class"),s(" CustomEvent "),n("span",{class:"token operator"},":"),s(" ApplicationEvent "),n("span",{class:"token punctuation"},"{"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`

`),n("span",{class:"token comment"},"// 发布事件"),s(`
MirageHolder`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"publishEvent"),n("span",{class:"token punctuation"},"("),n("span",{class:"token function"},"CustomEvent"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),W=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{class:"language-java"},[n("code",null,[n("span",{class:"token comment"},"// 定义自定义事件对象"),s(`
`),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"CustomEvent"),s(),n("span",{class:"token keyword"},"implements"),s(),n("span",{class:"token class-name"},"ApplicationEvent"),s(),n("span",{class:"token punctuation"},"{"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`

`),n("span",{class:"token comment"},"// 发布事件"),s(`
`),n("span",{class:"token class-name"},"MirageHolder"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"publishEvent"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"CustomEvent"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),Q=n("p",null,[s("所有的事件对象必须继承 "),n("code",null,"ApplicationEvent"),s(" 接口，以表示自己是一个事件对象")],-1);function nn(sn,an){const l=u("CodeTabs"),p=u("Mermaid");return d(),k("div",null,[v,i(l,{id:"52",data:[{title:"kotlin"},{title:"java"}],"tab-id":"language"},{tab0:a(({title:e,value:t,isActive:o})=>[b]),tab1:a(({title:e,value:t,isActive:o})=>[g]),_:1}),h,y,f,i(l,{id:"69",data:[{title:"kotlin"},{title:"java"}],"tab-id":"language"},{tab0:a(({title:e,value:t,isActive:o})=>[w]),tab1:a(({title:e,value:t,isActive:o})=>[_]),_:1}),B,i(l,{id:"97",data:[{title:"kotlin"},{title:"java"}],"tab-id":"language"},{tab0:a(({title:e,value:t,isActive:o})=>[x]),tab1:a(({title:e,value:t,isActive:o})=>[E]),_:1}),A,i(l,{id:"108",data:[{title:"kotlin"},{title:"java"}],"tab-id":"language"},{tab0:a(({title:e,value:t,isActive:o})=>[C]),tab1:a(({title:e,value:t,isActive:o})=>[j]),_:1}),D,i(p,{id:"mermaid-135",code:"eJxLL0osyFAIceLictR4um7ek33dT3umaXI5aTzZN/fF1mnPNq942rpUk8tZ42nH3KfLIZIuGi+nNDxb36jJ5arhlJqYF5BfXBJQlJ+cWlycX6TJ5aZRgBBwSk3LL0r1zMssyUzMyaxKLMnMz9PkckdW4phWklqErsJDw7E8sShVE+guXV07JyD2AGI3IHYGYncgduFy1QUCNwjlzgUAMLBLPA=="}),I,i(l,{id:"340",data:[{title:"kotlin"},{title:"java"}],"tab-id":"language"},{tab0:a(({title:e,value:t,isActive:o})=>[M]),tab1:a(({title:e,value:t,isActive:o})=>[P]),_:1}),S,i(p,{id:"mermaid-420",code:"eJxLL0osyFAIceLictR43rf+6aLml629z/euezat/cnubZpcThpPd015PmUFqqizRlZZ7tP+pmdTN0AkNLlcNJ5v3v1893xkQzS5XLEY+nTdrCc7O5/PaoEp4nLU1bVzAmJnIHYBYlcuADURUcg="}),V,i(l,{id:"462",data:[{title:"kotlin"},{title:"java"}],"tab-id":"language"},{tab0:a(({title:e,value:t,isActive:o})=>[T]),tab1:a(({title:e,value:t,isActive:o})=>[L]),_:1}),z,R,F,N,i(l,{id:"482",data:[{title:"kotlin"},{title:"java"}],"tab-id":"language"},{tab0:a(({title:e,value:t,isActive:o})=>[J]),tab1:a(({title:e,value:t,isActive:o})=>[$]),_:1}),K,i(l,{id:"493",data:[{title:"kotlin"},{title:"java"}],"tab-id":"language"},{tab0:a(({title:e,value:t,isActive:o})=>[O]),tab1:a(({title:e,value:t,isActive:o})=>[U]),_:1}),Y,i(l,{id:"528",data:[{title:"kotlin"},{title:"java"}],"tab-id":"language"},{tab0:a(({title:e,value:t,isActive:o})=>[Z]),tab1:a(({title:e,value:t,isActive:o})=>[q]),_:1}),G,X,i(l,{id:"542",data:[{title:"kotlin"},{title:"java"}],"tab-id":"language"},{tab0:a(({title:e,value:t,isActive:o})=>[H]),tab1:a(({title:e,value:t,isActive:o})=>[W]),_:1}),Q])}const tn=r(m,[["render",nn],["__file","framework.html.vue"]]);export{tn as default};
